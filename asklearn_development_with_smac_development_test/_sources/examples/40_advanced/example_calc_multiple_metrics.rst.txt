
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/40_advanced/example_calc_multiple_metrics.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_40_advanced_example_calc_multiple_metrics.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_40_advanced_example_calc_multiple_metrics.py:


=======
Metrics
=======

In *Auto-sklearn*, model is optimized over a metric, either built-in or
custom metric. Moreover, it is also possible to calculate multiple metrics
per run. The following examples show how to calculate metrics built-in
and self-defined metrics for a classification problem.

.. GENERATED FROM PYTHON SOURCE LINES 12-34

.. code-block:: default


    import autosklearn.classification
    import numpy as np
    import pandas as pd
    import sklearn.datasets
    import sklearn.metrics
    from autosklearn.metrics import balanced_accuracy, precision, recall, f1


    def error(solution, prediction):
        # custom function defining error
        return np.mean(solution != prediction)


    def get_metric_result(cv_results):
        results = pd.DataFrame.from_dict(cv_results)
        results = results[results['status'] == "Success"]
        cols = ['rank_test_scores', 'param_classifier:__choice__', 'mean_test_score']
        cols.extend([key for key in cv_results.keys() if key.startswith('metric_')])
        return results[cols]









.. GENERATED FROM PYTHON SOURCE LINES 35-37

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 37-42

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = \
        sklearn.model_selection.train_test_split(X, y, random_state=1)








.. GENERATED FROM PYTHON SOURCE LINES 43-45

Build and fit a classifier
==========================

.. GENERATED FROM PYTHON SOURCE LINES 45-61

.. code-block:: default


    error_rate = autosklearn.metrics.make_scorer(
        name='custom_error',
        score_func=error,
        optimum=0,
        greater_is_better=False,
        needs_proba=False,
        needs_threshold=False
    )
    cls = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=120,
        per_run_time_limit=30,
        scoring_functions=[balanced_accuracy, precision, recall, f1, error_rate]
    )
    cls.fit(X_train, y_train, X_test, y_test)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    AutoSklearnClassifier(per_run_time_limit=30,
                          scoring_functions=[balanced_accuracy, precision, recall,
                                             f1, custom_error],
                          time_left_for_this_task=120)



.. GENERATED FROM PYTHON SOURCE LINES 62-64

Get the Score of the final ensemble
===================================

.. GENERATED FROM PYTHON SOURCE LINES 64-71

.. code-block:: default


    predictions = cls.predict(X_test)
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))

    print("#" * 80)
    print("Metric results")
    print(get_metric_result(cls.cv_results_).to_string(index=False))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Accuracy score 0.9440559440559441
    ################################################################################
    Metric results
     rank_test_scores param_classifier:__choice__  mean_test_score  metric_balanced_accuracy  metric_precision  metric_recall  metric_f1  metric_custom_error
                    8               random_forest         0.971631                  0.969533          0.977528       0.977528   0.977528             0.028369
                   18                         mlp         0.964539                  0.955920          0.956522       0.988764   0.972376             0.035461
                   31                         mlp         0.950355                  0.944685          0.955556       0.966292   0.960894             0.049645
                   18               random_forest         0.964539                  0.959918          0.966667       0.977528   0.972067             0.035461
                    8                         mlp         0.971631                  0.961538          0.956989       1.000000   0.978022             0.028369
                    1                 extra_trees         0.985816                  0.984767          0.988764       0.988764   0.988764             0.014184
                    8               random_forest         0.971631                  0.969533          0.977528       0.977528   0.977528             0.028369
                   24                 extra_trees         0.957447                  0.954300          0.966292       0.966292   0.966292             0.042553
                    8               random_forest         0.971631                  0.969533          0.977528       0.977528   0.977528             0.028369
                    8               random_forest         0.971631                  0.969533          0.977528       0.977528   0.977528             0.028369
                   18           gradient_boosting         0.964539                  0.963915          0.977273       0.966292   0.971751             0.035461
                    8           gradient_boosting         0.971631                  0.965536          0.967033       0.988764   0.977778             0.028369
                    8                         mlp         0.971631                  0.965536          0.967033       0.988764   0.977778             0.028369
                    2                         mlp         0.978723                  0.971154          0.967391       1.000000   0.983425             0.021277
                    2           gradient_boosting         0.978723                  0.975151          0.977778       0.988764   0.983240             0.021277
                   18           gradient_boosting         0.964539                  0.959918          0.966667       0.977528   0.972067             0.035461
                   18               random_forest         0.964539                  0.959918          0.966667       0.977528   0.972067             0.035461
                    8                 extra_trees         0.971631                  0.969533          0.977528       0.977528   0.977528             0.028369
                   39          passive_aggressive         0.872340                  0.898876          1.000000       0.797753   0.887500             0.127660
                    2                 extra_trees         0.978723                  0.975151          0.977778       0.988764   0.983240             0.021277
                    8           gradient_boosting         0.971631                  0.965536          0.967033       0.988764   0.977778             0.028369
                   32                         mlp         0.943262                  0.939067          0.955056       0.955056   0.955056             0.056738
                   24               random_forest         0.957447                  0.942308          0.936842       1.000000   0.967391             0.042553
                   24                    adaboost         0.957447                  0.950303          0.956044       0.977528   0.966667             0.042553
                    2                 extra_trees         0.978723                  0.971154          0.967391       1.000000   0.983425             0.021277
                    8                 extra_trees         0.971631                  0.965536          0.967033       0.988764   0.977778             0.028369
                   34               decision_tree         0.936170                  0.937446          0.965116       0.932584   0.948571             0.063830
                   34               decision_tree         0.936170                  0.937446          0.965116       0.932584   0.948571             0.063830
                   36                 gaussian_nb         0.929078                  0.903846          0.898990       1.000000   0.946809             0.070922
                   24                 extra_trees         0.957447                  0.946305          0.946237       0.988764   0.967033             0.042553
                   37         k_nearest_neighbors         0.879433                  0.864520          0.891304       0.921348   0.906077             0.120567
                   32         k_nearest_neighbors         0.943262                  0.935069          0.945055       0.966292   0.955556             0.056738
                   24               liblinear_svc         0.957447                  0.958297          0.977011       0.955056   0.965909             0.042553
                   43                bernoulli_nb         0.390071                  0.516854          1.000000       0.033708   0.065217             0.609929
                   40          passive_aggressive         0.836879                  0.854797          0.945946       0.786517   0.858896             0.163121
                   18                 extra_trees         0.964539                  0.963915          0.977273       0.966292   0.971751             0.035461
                    2           gradient_boosting         0.978723                  0.975151          0.977778       0.988764   0.983240             0.021277
                   41                bernoulli_nb         0.609929                  0.483146          0.623188       0.966292   0.757709             0.390071
                   24                  libsvm_svc         0.957447                  0.946305          0.946237       0.988764   0.967033             0.042553
                   24                         mlp         0.957447                  0.950303          0.956044       0.977528   0.966667             0.042553
                   42                         mlp         0.397163                  0.346586          0.521739       0.539326   0.530387             0.602837
                   37                    adaboost         0.879433                  0.852528          0.867347       0.955056   0.909091             0.120567
                    2                 extra_trees         0.978723                  0.975151          0.977778       0.988764   0.983240             0.021277





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  54.945 seconds)


.. _sphx_glr_download_examples_40_advanced_example_calc_multiple_metrics.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/40_advanced/example_calc_multiple_metrics.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_calc_multiple_metrics.py <example_calc_multiple_metrics.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_calc_multiple_metrics.ipynb <example_calc_multiple_metrics.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
